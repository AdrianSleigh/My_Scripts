--SQLDatabase capacity planning
-- Based on backup sizes
-- Adrian Sleigh 24/10/25
--------------------------------------
DECLARE @startDate DATETIME;
SET @startDate = GETDATE();

WITH BackupStats AS (
    SELECT 
        BS.database_name AS DatabaseName,
        DATEDIFF(mm, @startDate, BS.backup_start_date) AS MonthsAgo,
        CONVERT(NUMERIC(10, 1), AVG(BF.file_size / 1048576.0)) AS AvgSizeMB
    FROM msdb.dbo.backupset AS BS
    INNER JOIN msdb.dbo.backupfile AS BF ON BS.backup_set_id = BF.backup_set_id
    WHERE BS.database_name NOT IN ('Master','Msdb','Model','Tempdb','SQL_Monitoring')
        AND BS.database_name IN (
            SELECT db_name(database_id)
            FROM master.sys.databases
            WHERE state_desc = 'ONLINE'
        )
        AND BF.file_type = 'D'
        AND BS.backup_start_date BETWEEN DATEADD(yy, -1, @startDate) AND @startDate
    GROUP BY BS.database_name, DATEDIFF(mm, @startDate, BS.backup_start_date)
),
Pivoted AS (
    SELECT *
    FROM BackupStats
    PIVOT (
        SUM(AvgSizeMB) FOR MonthsAgo IN (
            [0],[-1],[-2],[-3],[-4],[-5],[-6],[-7],[-8],[-9],[-10],[-11],[-12]
        )
    ) AS PVT
),
GrowthCalc AS (
    SELECT 
        SUBSTRING(@@SERVERNAME,1,40) AS SQL_Instance,
        SUBSTRING(DatabaseName,1,50) AS DatabaseName,
        [0],[-1],[-2],[-3],[-4],[-5],[-6],[-7],[-8],[-9],[-10],[-11],[-12],

        COALESCE([-12], [-11], [-10], [-9], [-8], [-7], [-6], [-5], [-4], [-3], [-2], [-1]) AS EarliestMonthSize,

        CASE 
            WHEN [0] IS NOT NULL AND COALESCE([-12], [-11], [-10], [-9], [-8], [-7], [-6], [-5], [-4], [-3], [-2], [-1]) IS NOT NULL
            THEN ROUND(([0] - COALESCE([-12], [-11], [-10], [-9], [-8], [-7], [-6], [-5], [-4], [-3], [-2], [-1])) * 100.0 / 
                        COALESCE([-12], [-11], [-10], [-9], [-8], [-7], [-6], [-5], [-4], [-3], [-2], [-1]), 2)
            ELSE NULL
        END AS PercentGrowth,

        CASE 
            WHEN [0] IS NOT NULL AND COALESCE([-12], [-11], [-10], [-9], [-8], [-7], [-6], [-5], [-4], [-3], [-2], [-1]) IS NOT NULL THEN
                ROUND(([0] - COALESCE([-12], [-11], [-10], [-9], [-8], [-7], [-6], [-5], [-4], [-3], [-2], [-1])) / 
                      NULLIF(
                          (
                              CASE WHEN [-1] IS NOT NULL THEN 1 ELSE 0 END +
                              CASE WHEN [-2] IS NOT NULL THEN 1 ELSE 0 END +
                              CASE WHEN [-3] IS NOT NULL THEN 1 ELSE 0 END +
                              CASE WHEN [-4] IS NOT NULL THEN 1 ELSE 0 END +
                              CASE WHEN [-5] IS NOT NULL THEN 1 ELSE 0 END +
                              CASE WHEN [-6] IS NOT NULL THEN 1 ELSE 0 END +
                              CASE WHEN [-7] IS NOT NULL THEN 1 ELSE 0 END +
                              CASE WHEN [-8] IS NOT NULL THEN 1 ELSE 0 END +
                              CASE WHEN [-9] IS NOT NULL THEN 1 ELSE 0 END +
                              CASE WHEN [-10] IS NOT NULL THEN 1 ELSE 0 END +
                              CASE WHEN [-11] IS NOT NULL THEN 1 ELSE 0 END +
                              CASE WHEN [-12] IS NOT NULL THEN 1 ELSE 0 END
                          ), 0), 2)
            ELSE NULL
        END AS AvgMonthlyGrowthMB,

        -- Projected size in 3 months
        CASE 
            WHEN [0] IS NOT NULL AND COALESCE([-12], [-11], [-10], [-9], [-8], [-7], [-6], [-5], [-4], [-3], [-2], [-1]) IS NOT NULL THEN
                ROUND(
                    [0] + (
                        ([0] - COALESCE([-12], [-11], [-10], [-9], [-8], [-7], [-6], [-5], [-4], [-3], [-2], [-1])) / 
                        NULLIF(
                            (
                                CASE WHEN [-1] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-2] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-3] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-4] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-5] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-6] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-7] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-8] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-9] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-10] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-11] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-12] IS NOT NULL THEN 1 ELSE 0 END
                            ), 0
                        ) * 3
                    ), 2
                )
            ELSE NULL
        END AS ProjectedSize3Mo,

        -- Projected size in 6 months
        CASE 
            WHEN [0] IS NOT NULL AND COALESCE([-12], [-11], [-10], [-9], [-8], [-7], [-6], [-5], [-4], [-3], [-2], [-1]) IS NOT NULL THEN
                ROUND(
                    [0] + (
                        ([0] - COALESCE([-12], [-11], [-10], [-9], [-8], [-7], [-6], [-5], [-4], [-3], [-2], [-1])) / 
                        NULLIF(
                            (
                                CASE WHEN [-1] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-2] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-3] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-4] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-5] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-6] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-7] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-8] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-9] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-10] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-11] IS NOT NULL THEN 1 ELSE 0 END +
                                CASE WHEN [-12] IS NOT NULL THEN 1 ELSE 0 END
                            ), 0
                        ) * 6
                    ), 2
                )
            ELSE NULL
        END AS ProjectedSize6Mo,

        -- Growth alert
        CASE 
            WHEN [0] IS NOT NULL AND COALESCE([-12], [-11], [-10], [-9], [-8], [-7], [-6], [-5], [-4], [-3], [-2], [-1]) IS NOT NULL THEN
                CASE 
                    WHEN ROUND(([0] - COALESCE([-12], [-11], [-10], [-9], [-8], [-7], [-6], [-5], [-4], [-3], [-2], [-1])) * 100.0 / 
                               COALESCE([-12], [-11], [-10], [-9], [-8], [-7], [-6], [-5], [-4], [-3], [-2], [-1]), 2) > 50 THEN N'High Growth üö®'
                    WHEN ROUND(([0] - COALESCE([-12], [-11], [-10], [-9], [-8], [-7], [-6], [-5], [-4], [-3], [-2], [-1])) * 100.0 / 
                               COALESCE([-12], [-11], [-10], [-9], [-8], [-7], [-6], [-5], [-4], [-3], [-2], [-1]), 2) BETWEEN 25 AND 50 THEN N'Moderate Growth ‚ö†Ô∏è'
                    ELSE N'Stable ‚úÖ'
                END
            ELSE 'Insufficient Data'
        END AS GrowthAlert

    FROM Pivoted
)
SELECT *
FROM GrowthCalc
ORDER BY DatabaseName;
---------------------------------------------------------------------------
